
# load variables from .env
set dotenv-load 

build_type := env_var_or_default("LLVM_BUILD_TYPE", "Debug")
builddir := "build-" + build_type
c_compiler := "clang"
cxx_compiler := "clang++"
linker := env_var_or_default("LLVM_USE_LINKER", "lld")
projects := env_var_or_default("LLVM_ENABLE_PROJECTS", "mlir") # semicolon-separated
targets := env_var_or_default("LLVM_TARGETS_TO_BUILD", "host") # semicolon-separated


default: build

cmake *EXTRA:
    cmake -Sllvm -B{{builddir}} -GNinja -DCMAKE_BUILD_TYPE={{build_type}} \
    "-DLLVM_ENABLE_PROJECTS={{projects}}" -DLLVM_CCACHE_BUILD=ON -DLLVM_USE_LINKER={{linker}} \
    -DCMAKE_INSTALL_PREFIX={{parent_directory(justfile_directory())}}/llvm-install/{{file_name(justfile_directory())}}-{{build_type}} \
    "-DLLVM_TARGETS_TO_BUILD={{targets}}" -DLLVM_BUILD_TOOLS=ON -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
    -DCMAKE_C_COMPILER={{c_compiler}} -DCMAKE_CXX_COMPILER={{cxx_compiler}} {{EXTRA}}


doNinja *ARGS:
    ninja -C{{builddir}} {{ARGS}}

install: (doNinja "install")
build: doNinja

alias b := build 

testMlir: (doNinja "check-mlir")
testMlirTosa: (doNinja 
    "check-mlir-dialect-tosa"
    "check-mlir-conversion-tosatoarith"
    "check-mlir-conversion-tosatolinalg"
    "check-mlir-conversion-tosatoscf"
    "check-mlir-conversion-tosatotensor")

genMlirHeaders: (doNinja "mlir-generic-headers")
